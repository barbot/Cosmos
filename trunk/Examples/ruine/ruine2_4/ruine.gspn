
const double p = 0.300000;
const double q = 0.700000;

NbPlaces = 21;
NbTransitions = 14;

PlacesList = { Place1_1, AntiPlace1_1, Place1_2, AntiPlace1_2, Place1_3, AntiPlace1_3, Place1_4, AntiPlace1_4, Place2_1, AntiPlace2_1, Place2_2, AntiPlace2_2, Place2_3, AntiPlace2_3, Place2_4, AntiPlace2_4, RE_nPlace1, RE_nPlace2, RE_nPlace3, RE_nPlace4, Puit } ;

TransitionsList = { Avance1_1, Recule1_1, Avance1_2, Recule1_2, Avance1_3, Recule1_3, Avance2_1, Recule2_1, Avance2_2, Recule2_2, Avance2_3, Recule2_3, Absorbe,Puittrans } ;

Marking = { (Place1_1,0);(AntiPlace1_1,1); (Place1_2,1);(AntiPlace1_2,0); (Place1_3,0);(AntiPlace1_3,1); (Place1_4,0);(AntiPlace1_4,1); (Place2_1,0);(AntiPlace2_1,1); (Place2_2,1);(AntiPlace2_2,0); (Place2_3,0);(AntiPlace2_3,1); (Place2_4,0);(AntiPlace2_4,1); (RE_nPlace1,0);(RE_nPlace2,2);(RE_nPlace3,0);(RE_nPlace4,0);(Puit,0); } ;

Transitions = {(Avance1_1,EXPONENTIAL(p),1,1,SINGLE);
 (Recule1_1,EXPONENTIAL(q),1,1,SINGLE);
 (Avance1_2,EXPONENTIAL(p),1,1,SINGLE);
 (Recule1_2,EXPONENTIAL(q),1,1,SINGLE);
 (Avance1_3,EXPONENTIAL(p),1,1,SINGLE);
 (Recule1_3,EXPONENTIAL(q),1,1,SINGLE);
 (Avance2_1,EXPONENTIAL(p),1,1,SINGLE);
 (Recule2_1,EXPONENTIAL(q),1,1,SINGLE);
 (Avance2_2,EXPONENTIAL(p),1,1,SINGLE);
 (Recule2_2,EXPONENTIAL(q),1,1,SINGLE);
 (Avance2_3,EXPONENTIAL(p),1,1,SINGLE);
 (Recule2_3,EXPONENTIAL(q),1,1,SINGLE);
 (Absorbe,EXPONENTIAL(1),1,1,SINGLE);
 (Puittrans ,EXPONENTIAL(0*Place1_1),1,1,SINGLE);
   } ;

InArcs = { (Place1_1, Avance1_1,1);
 (AntiPlace1_2, Avance1_1,1);
 (RE_nPlace1, Avance1_1,1);
 (AntiPlace2_1, Avance1_1,1);
 (AntiPlace1_1, Recule1_1,1);
 (Place1_2, Recule1_1,1);
 (RE_nPlace2, Recule1_1,1);
 (Place1_2, Avance1_2,1);
 (AntiPlace1_3, Avance1_2,1);
 (RE_nPlace2, Avance1_2,1);
 (AntiPlace2_2, Avance1_2,1);
 (AntiPlace1_2, Recule1_2,1);
 (Place1_3, Recule1_2,1);
 (RE_nPlace3, Recule1_2,1);
 (Place1_3, Avance1_3,1);
 (AntiPlace1_4, Avance1_3,1);
 (RE_nPlace3, Avance1_3,1);
 (AntiPlace2_3, Avance1_3,1);
 (AntiPlace1_3, Recule1_3,1);
 (Place1_4, Recule1_3,1);
 (RE_nPlace4, Recule1_3,1);
 (Place2_1, Avance2_1,1);
 (AntiPlace2_2, Avance2_1,1);
 (RE_nPlace1, Avance2_1,1);
 (AntiPlace2_1, Recule2_1,1);
 (Place2_2, Recule2_1,1);
 (RE_nPlace2, Recule2_1,1);
 (Place2_2, Avance2_2,1);
 (AntiPlace2_3, Avance2_2,1);
 (RE_nPlace2, Avance2_2,1);
 (AntiPlace2_2, Recule2_2,1);
 (Place2_3, Recule2_2,1);
 (RE_nPlace3, Recule2_2,1);
 (Place2_3, Avance2_3,1);
 (AntiPlace2_4, Avance2_3,1);
 (RE_nPlace3, Avance2_3,1);
 (AntiPlace2_3, Recule2_3,1);
 (Place2_4, Recule2_3,1);
 (RE_nPlace4, Recule2_3,1);
 (RE_nPlace4, Absorbe,1);
  } ;

OutArcs = { (Avance1_1, Place1_2,1);
 (Avance1_1, RE_nPlace2,1);
 (Avance1_1, AntiPlace1_1,1);
 (Avance1_1, AntiPlace2_1,1);
 (Recule1_1, RE_nPlace1,1);
 (Recule1_1, AntiPlace1_2,1);
 (Avance1_2, Place1_3,1);
 (Avance1_2, RE_nPlace3,1);
 (Avance1_2, AntiPlace1_2,1);
 (Avance1_2, AntiPlace2_2,1);
 (Recule1_2, Place1_2,1);
 (Recule1_2, RE_nPlace2,1);
 (Recule1_2, AntiPlace1_3,1);
 (Avance1_3, RE_nPlace4,1);
 (Avance1_3, AntiPlace1_3,1);
 (Avance1_3, AntiPlace2_3,1);
 (Recule1_3, Place1_3,1);
 (Recule1_3, RE_nPlace3,1);
 (Recule1_3, AntiPlace1_4,1);
 (Avance2_1, Place2_2,1);
 (Avance2_1, RE_nPlace2,1);
 (Avance2_1, AntiPlace2_1,1);
 (Recule2_1, RE_nPlace1,1);
 (Recule2_1, AntiPlace2_2,1);
 (Avance2_2, Place2_3,1);
 (Avance2_2, RE_nPlace3,1);
 (Avance2_2, AntiPlace2_2,1);
 (Recule2_2, Place2_2,1);
 (Recule2_2, RE_nPlace2,1);
 (Recule2_2, AntiPlace2_3,1);
 (Avance2_3, RE_nPlace4,1);
 (Avance2_3, AntiPlace2_3,1);
 (Recule2_3, Place2_3,1);
 (Recule2_3, RE_nPlace3,1);
 (Recule2_3, AntiPlace2_4,1);
 (Absorbe,RE_nPlace4,1);
 (Puittrans, Puit,1); } ;