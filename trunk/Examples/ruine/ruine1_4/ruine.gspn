
const double p = 0.300000;
const double q = 0.700000;

NbPlaces = 9;
NbTransitions = 6;

PlacesList = { RE_Place1_1, AntiPlace1_1, RE_Place1_2, AntiPlace1_2, RE_Place1_3, AntiPlace1_3, RE_Place1_4, AntiPlace1_4, Puit } ;

TransitionsList = { Recule1_1, Avance1_2, Recule1_2, Avance1_3, selfloop,Puittrans } ;

Marking = { (RE_Place1_1,0);(AntiPlace1_1,1); (RE_Place1_2,1);(AntiPlace1_2,0); (RE_Place1_3,0);(AntiPlace1_3,1); (RE_Place1_4,0);(AntiPlace1_4,1); (Puit,0); } ;

Transitions = {(Recule1_1,EXPONENTIAL(q),1,1,SINGLE);
 (Avance1_2,EXPONENTIAL(p),1,1,SINGLE);
 (Recule1_2,EXPONENTIAL(q),1,1,SINGLE);
 (Avance1_3,EXPONENTIAL(p),1,1,SINGLE);
 (selfloop,EXPONENTIAL(0*RE_Place1_1),1,1,SINGLE);
 (Puittrans ,EXPONENTIAL(0*RE_Place1_1),1,1,SINGLE);
   } ;

InArcs = { (AntiPlace1_1, Recule1_1,1);
 (RE_Place1_2, Recule1_1,1);
 (RE_Place1_2, Avance1_2,1);
 (AntiPlace1_3, Avance1_2,1);
 (AntiPlace1_2, Recule1_2,1);
 (RE_Place1_3, Recule1_2,1);
 (RE_Place1_3, Avance1_3,1);
 (AntiPlace1_4, Avance1_3,1);
  } ;

OutArcs = { (Recule1_1, RE_Place1_1,1);
 (Recule1_1, AntiPlace1_2,1);
 (Avance1_2, RE_Place1_3,1);
 (Avance1_2, AntiPlace1_2,1);
 (Recule1_2, RE_Place1_2,1);
 (Recule1_2, AntiPlace1_3,1);
 (Avance1_3, RE_Place1_4,1);
 (Avance1_3, AntiPlace1_3,1);
 (Puittrans, Puit,1); } ;